const { ethers } = require("ethers");
const fs = require('fs');
const FIX_ID = 32 * 2;

console.log('------------------comparator script-----------------------', '\n');

const configContract = './contract_config.json';

async function iterator(CfgC) {

    var F = require(CfgC);
    var L = Object.keys(F).length;

    var STR = initializeReport();
    STR.write('Prediction Report: Let us know if the code in this repo will produce smart contracts that will verify in a block explorer', "\n");
    console.log('Prediction Report: Let us know if the code in this repo will produce smart contracts that will verify in a block explorer', '\n');
    
    for (let i = 0; i< L; ++i) {

        let ki = Object.keys(F)[i]; // this is the network id
        STR.write('contracts dpeloyed in the network id: ', ki, '\n');
        console.log('contracts dpeloyed in the network id: ', ki, '\n');
        let vi = F[ki][2];          // this is the path to the JSON file with the list of contracts for that network id
        let Provi = F[ki][1];        // this is Sovryn's provider endpoint for that network id
        let pi = new ethers.providers.JsonRpcProvider(Provi); // ethers provider
        let C = require(vi);        // this is the JSON object with the data of contracts
        let Lc = Object.keys(C).length; // this is how many contract are listed in that JSON
        STR.write('checking ', Lc, ' contracts.', '\n');
        console.log('checking ', Lc, ' contracts.', '\n');
        
        for (let j = 0; j < Lc ; ++j) {

            kj = Object.keys(C)[j]; // this is the name of the contract
            STR.write('checking element N째: ', j + 1, ', the contract: ', kj, '\n');
            console.log('checking element N째: ', j + 1, ', the contract: ', kj, '\n');
            let Ad = C[kj][0]       // this is the address of the deployment of that contract in that network id
            let Pt = C[kj][1]       // this is the path of the JSON file produced by the compilation, with the predicted bytecode
            let Bytc = require(Pt);
            let B0 = Bytc['deployedBytecode'];
            let B1 = await pi.getCode(Ad);
            let veredict = compare(B0, B1);
            if(veredict) {
               let success =  "the contract " + kj + ", deployed in the network N째 " + ki + ", with the address " + Ad + " will successfully verify with the code of this repository";
               STR.write(success);
               console.log(success);
            } 
            if(!veredict) {
                let fail = "the contract " + kj + ", deployed in the network N째 " + ki + ", with the address " + Ad + " will NOT verify with the code of this repository";
                STR.write(fail);
                console.log(fail);
            }

        }

    }

    STR.end();

}

function initializeReport() {
    // writtable streams with fs:
    // https://stackoverflow.com/questions/3459476/how-to-append-to-a-file-in-node/43370201#43370201
    // according to: https://nodejs.org/api/fs.html#file-system-flags
    // File system flag 'a': Open file for appending. The file is created if it does not exist.
    var stream = fs.createWriteStream('./report', {flags:'a'});    
    return stream;
}

function compare(A, B) {

    bytes = select(A, B);
    bytes = reduce(bytes[0], bytes[1]);
    
    x = bytes[0] == bytes[1];
    
    // console.log(bytes[0], bytes[1]);
    return x;

}

function sizes(A,B) {

    return ((A.length == B.length) && isPair(A.length));

}

function select(A, B) {

    if (!sizes(A,B)) {
        console.log("sizes not equal or invalid");
        return ["wrong", "arguments"];
    }

    for (let i = A.length; i > 2; i--) {
        
        if (A[(i-1)]!=B[(i-1)]) {

            if (isPair(i)) {

                A = A.slice(0,i);
                B = B.slice(0,i);

            } else {

                A = A.slice(0,i+1);
                B = B.slice(0,i+1);

            }

            return [A, B];

        }

    }

}

function reduce(A, B) {

    if (!sizes(A,B) || A.length <= FIX_ID + 2) {
        console.log("sizes not equal, invalid or too short")
        return ["wrong", "arguments"]
    }

    x = A.length - FIX_ID;

    A = A.slice(0,x);
    B = B.slice(0,x);

    return [A, B];
}

function isPair(X) {

    return X % 2 == 0

}

iterator(configContract);